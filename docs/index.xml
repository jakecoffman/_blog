
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Jake&#39;s Micro-Blog</title>
   <link>https://www.jakecoffman.com/blog/</link>
   <description>Recent content on Jake&#39;s Micro-Blog</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Fri, 20 Aug 2021 00:00:00 -0500</lastBuildDate>
   
       <atom:link href="https://www.jakecoffman.com/blog/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>My AI Saga</title>
       <link>https://www.jakecoffman.com/blog/posts/ai/</link>
       <pubDate>Fri, 20 Aug 2021 00:00:00 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/ai/</guid>
       <description>&lt;p&gt;I started getting into AI in 2020 when a coworker asked me if I wanted to compete on the &lt;a href=&#34;https://www.codingame.com&#34;&gt;CodinGame&lt;/a&gt; Spring Challenge. After 11 days, &lt;a href=&#34;https://www.codingame.com/contests/spring-challenge-2020/leaderboard/global?column=keyword&amp;amp;value=jke&#34;&gt;I finished 112th&lt;/a&gt; out of about 5,000 contestants. I was hooked!&lt;/p&gt;&lt;h2 id=&#34;2020-spring-challenge&#34;&gt;2020 Spring Challenge&lt;/h2&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/TA2hfUBZs84&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;My basic strategy in this challenge was to use A* to find the most valuable route to the larger pellets, or just to find a valuable route that my opponent probably won&amp;rsquo;t beat me to.&lt;/p&gt;&lt;p&gt;Unfortunately I can&amp;rsquo;t reveal my code since anyone could copy and paste it into the game. I did however create a repo called &lt;a href=&#34;https://github.com/jakecoffman/graph&#34;&gt;graph&lt;/a&gt; that has generic versions of algorithms in Go that you can copy and paste into your project and use.&lt;/p&gt;&lt;p&gt;Over the next year I joined in 2 more competitions.&lt;/p&gt;&lt;h2 id=&#34;2020-fall-challenge&#34;&gt;2020 Fall Challenge&lt;/h2&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/UiFTRy2mdCo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;In my time since the Spring Challenge I basically forgot the competition existed, so when I started this one I only had A* in my arsenal. At first glance it looked like I wouldn&amp;rsquo;t be able to use it, but once you realize any problem can be reduced to a graph or a tree, and then traverse it using A*. So that&amp;rsquo;s what I did for this competition.&lt;/p&gt;&lt;p&gt;To my surprise, I ranked lower this time: 248th out of 7,011. I started reading about Beam Search which many of the other competitors said they used. I had trouble finding good code examples. The write-ups for Beam were in more academic papers which contained mathematical notation rather than code snippets.&lt;/p&gt;&lt;h2 id=&#34;2021-spring-challenge&#34;&gt;2021 Spring Challenge&lt;/h2&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/KcfwfAJxgyc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;This time I was prepared to try Beam Search, but I was still having trouble finding nice examples for that algorithm. Someone in the chat said they were using a variant called Chokudai (named after another competitor!) which is a variant that uses depth-first search rather than breadth-first. I found a very clear and simple C++ program explaining the algorithm, so I was off!&lt;/p&gt;&lt;p&gt;Unfortunately I had a worse placement than before: 413th out of 6,867. This time between competitions I decided to learn more, and capture what I already knew in my &lt;a href=&#34;https://github.com/jakecoffman/graph&#34;&gt;graph&lt;/a&gt; repo.&lt;/p&gt;&lt;h2 id=&#34;genetic-algorithm&#34;&gt;Genetic algorithm&lt;/h2&gt;&lt;p&gt;After I made some clear examples of Beam and Chokudai, I decided to learn about Genetic Algorithms (GA) which had always interested me.&lt;/p&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/81mh4uJ7WHA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;In Code vs Zombies you can see my GA is corralling zombies in for a huge combo. In this optimization problem I am ranked 119th out of 10,772!&lt;/p&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/UVmh9adAtc4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;In Mars Lander my GA navigates difficult terrain to land at the right speed on flat ground.&lt;/p&gt;&lt;p&gt;For GAs it&amp;rsquo;s important to visualize what each generation is doing. Here&amp;rsquo;s what generation 0 might look like:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/mars/gen0.svg&#34; alt=&#34;Generation 0&#34;&gt;&lt;/p&gt;&lt;p&gt;There are some wispy lines that I pre-generate to get better results, and the rest are random.&lt;/p&gt;&lt;p&gt;Generation 0 is my initial population. After selection, breeding, and mutating, we get Generation 1:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/mars/gen1.svg&#34; alt=&#34;Generation 1&#34;&gt;&lt;/p&gt;&lt;p&gt;Now there appears to be fewer lines, I suspect there is a lot of overlap. However now the lines are beginning to move in the direction of the landing site.&lt;/p&gt;&lt;p&gt;Jumping up to Generation 10:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/mars/gen10.svg&#34; alt=&#34;Generation 10&#34;&gt;&lt;/p&gt;&lt;p&gt;Generation 10 is laser focused the landing site, but appears to be crashing straight into it. There should be more of a curve, so it lands safely.&lt;/p&gt;&lt;p&gt;Jumping forward again to the final and best Generation:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/mars/gen154.svg&#34; alt=&#34;Generation 154&#34;&gt;&lt;/p&gt;&lt;p&gt;Now we see that the GA is slowing the lander down, so it can land safely.&lt;/p&gt;&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;&lt;p&gt;2021 Fall Challenge is coming up. I&amp;rsquo;m excited and hopeful to place high in the competition, assuming I can carve out enough time.&lt;/p&gt;&lt;p&gt;I also have some more algorithms I need to try out, like Minimax.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Unit Testing Affirmation</title>
       <link>https://www.jakecoffman.com/blog/posts/unit-testing-affirmation/</link>
       <pubDate>Fri, 20 Aug 2021 00:00:00 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/unit-testing-affirmation/</guid>
       <description>&lt;p&gt;Months ago I &lt;a href=&#34;../unit-testing&#34;&gt;wrote my thoughts&lt;/a&gt; on why unit testing is sometimes not desirable. Recently I was affirmed in my thoughts by Ian Cooper on a talk about why TDD went wrong.&lt;/p&gt;&lt;p&gt;Also, I am realizing that when TDD was created and popularized, we didn&amp;rsquo;t have Docker or Firecracker VMs. Integration tests against databases or whole systems could take a very long time to run. These days within seconds we can have a fresh version of a DB running in a container.&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the video:&lt;/p&gt;&lt;h2 id=&#34;tdd-where-did-it-all-go-wrong&#34;&gt;TDD, where did it all go wrong?&lt;/h2&gt;&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;  &lt;iframe src=&#34;https://www.youtube.com/embed/EZ05e7EMOLM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Jenkins sidecar</title>
       <link>https://www.jakecoffman.com/blog/posts/jenkins-sidecar/</link>
       <pubDate>Mon, 12 Apr 2021 08:29:20 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/jenkins-sidecar/</guid>
       <description>&lt;p&gt;Jenkins has &amp;ldquo;sidecar&amp;rdquo; functionality that allows you to run multiple Docker containers at the same time to make testing easier. It seems like hardly anyone is taking advantage of this functionality, so I went ahead and pieced together how to run a Jenkins sidecar with Postgres to run a Go integration test.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Build &amp;amp; Test&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    steps &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        script &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// withDockerNetwork is defined at the bottom&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            withDockerNetwork &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// withRun starts postgres as a sidecar&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                docker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;postgres:13&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withRun&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--network ${n} -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_USER=root -p 5432:5432&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// extract the IP address from the postgres container&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    String postgres_ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sh&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;                            script: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker inspect -f {{.NetworkSettings.Networks.${n}.IPAddress}} ${c.id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;                            returnStdout: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// inside means the sh will be run inside the container&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    docker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang:1.16&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inside&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--network ${n}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// now inject the IP into an ENV and run the tests&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export POSTGRES_IP=&amp;#34;${postgres_ip.replace(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;go test -race ./...&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// withDockerNetwork creates a docker network so the containers can talk to eachother&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;withDockerNetwork&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Closure inner&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        networkId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generator&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;        sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker network create ${networkId}&amp;#34;&lt;/span&gt;        inner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;networkId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        sh &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker network rm ${networkId}&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// since networks need to be unique we generate a name that way two runs can be in parallel&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcdefghijklmnopqrstuvwxyz&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toCharArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;    StringBuilder sb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    Random random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chars&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nextInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;chars&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)];&lt;/span&gt;        sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Go swagger generator</title>
       <link>https://www.jakecoffman.com/blog/posts/swagger-generator/</link>
       <pubDate>Thu, 04 Mar 2021 12:00:00 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/swagger-generator/</guid>
       <description>&lt;p&gt;I built a Go library that can generate Swagger and validation middleware automatically from Go code.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s called CRUD and you can get it here: &lt;a href=&#34;https://github.com/jakecoffman/crud&#34;&gt;https://github.com/jakecoffman/crud&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;&lt;p&gt;Start by getting the package &lt;code&gt;go get github.com/jakecoffman/crud&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Then in your &lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a router with &lt;code&gt;NewRouter&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Add routes with &lt;code&gt;Add&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Then call &lt;code&gt;Serve&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Routes are specifications that look like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Spec&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt;:      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;:        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/widgets/{id}&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;PreHandlers&lt;/span&gt;: []&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Auth&lt;/span&gt;},&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateHandler&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Adds a widget&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;Tags&lt;/span&gt;:        []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Widgets&amp;#34;&lt;/span&gt;},&lt;span style=&#34;color:#a6e22e&#34;&gt;Validate&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Validate&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Number&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Required&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ID of the widget&amp;#34;&lt;/span&gt;),        }),&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Object&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Field&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;owner&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;crud&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Required&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Example&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Widget owner&amp;#39;s name&amp;#34;&lt;/span&gt;),}),},}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will add a route &lt;code&gt;/widgets/:id&lt;/code&gt; that responds to the PATCH method. It generates swagger and serves it at the root of the web application. It validates that the ID in the path is a number, so you don&amp;rsquo;t have to. It also validates that the body is an object and has an &amp;ldquo;owner&amp;rdquo; property that is a string, again so you won&amp;rsquo;t have to.&lt;/p&gt;&lt;p&gt;It mounts the swagger-ui at &lt;code&gt;/&lt;/code&gt; and loads up the generated swagger.json.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Unit Testing</title>
       <link>https://www.jakecoffman.com/blog/posts/unit-testing/</link>
       <pubDate>Wed, 16 Dec 2020 00:00:00 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/unit-testing/</guid>
       <description>&lt;p&gt;A unit test is a test that tests a single function with all external dependencies mocked or faked.&lt;/p&gt;&lt;p&gt;Unit testing can either be valuable or be a detriment to the code base, depending on what is being tested.&lt;/p&gt;&lt;h2 id=&#34;the-good-parts&#34;&gt;The Good Parts&lt;/h2&gt;&lt;p&gt;Unit testing is valuable when the unit under test has few side effects and actually calculates a value. It can also be valuable to test difficult-to-recreate error scenarios like filesystem errors.&lt;/p&gt;&lt;p&gt;Cross is a great candidate for unit testing since it is pure:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Cross&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This controller logic should be unit tested to ensure the error cases will always be handled. An integration test would work too but since there are no dependencies a unit test is preferable.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;) {  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reservationId&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Must be launched with one of: dataId, reservationId`&lt;/span&gt;)  }  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;endDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;endDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date()) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Already ended`&lt;/span&gt;)  }  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;workId&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`External users may not provide workId`&lt;/span&gt;)  }  &lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;easier-to-test-harder-to-use&#34;&gt;Easier to test, harder to use&lt;/h2&gt;&lt;p&gt;What happens when you write a test for this function?&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Lerp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mult&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;))}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strictly speaking you&amp;rsquo;ve written an integration test, not a unit test!&lt;/p&gt;&lt;p&gt;So a test purist would say you need to introduce dependency injection to mock out the other units:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Lerp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt; {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;))}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or maybe some other similar scheme&amp;hellip;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;PLEASE DON&amp;rsquo;T DO THIS.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Just write integration tests then at that point, and put them in a different directory. Sometimes by making your code easier to &lt;em&gt;unit&lt;/em&gt; test you&amp;rsquo;re making it harder to use and reason about.&lt;/p&gt;&lt;p&gt;Dependency Injection is a good thing, but it needs to be applied in sensible ways. (TODO: Future blog post?)&lt;/p&gt;&lt;h2 id=&#34;testing-the-mocks&#34;&gt;Testing the mocks&lt;/h2&gt;&lt;p&gt;Consider this example:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;) {  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;patchAndFetchById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt;) {    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notFound&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Cannot find user with ID &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&lt;/span&gt;)  }  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mocking out the User object so that database interaction doesn&amp;rsquo;t happen means you&amp;rsquo;re essentially testing whether you got your mock right. Does this code correctly handle when the ID is not found? It either throws or returns null, but we don&amp;rsquo;t know if we mock it.&lt;/p&gt;&lt;p&gt;Also consider if you get the mock right but later an update to the library changes the behavior. With a unit test you won&amp;rsquo;t know something is wrong because &lt;em&gt;you&amp;rsquo;re just testing your mocks&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s another kind of function not worth unit testing that I often see:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) {  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;widgetService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchWidget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;transactionService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;billingService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createBill&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;trx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is &amp;ldquo;glue code&amp;rdquo;. Unit testing makes no sense and will slow you down when business needs change.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Server-Side Hydration Anti-Pattern</title>
       <link>https://www.jakecoffman.com/blog/posts/server-side-hydration/</link>
       <pubDate>Thu, 10 Dec 2020 14:49:48 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/server-side-hydration/</guid>
       <description>&lt;p&gt;When designing and implementing a REST API in a service-oriented or microservice architecture you may be tempted to fetch remote objects so the UI doesn&amp;rsquo;t have to fetch them individually later. This is often called hydration or inflation.&lt;/p&gt;&lt;p&gt;I will now try to convince you that this is an anti-pattern to hydrate server-side.&lt;/p&gt;&lt;h2 id=&#34;an-example&#34;&gt;An Example&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s say you have a service for users, and your REST Resource contains a list of users. The naive approach is to store the user IDs in the list and then allow the UI to hydrate the users by calling to the user service.&lt;/p&gt;&lt;p&gt;Maybe you or the UI team thinks this is too much work for the UI to do! So you decide to hydrate your resource with the full user object by calling to the user service just before the response.&lt;/p&gt;&lt;p&gt;Suddenly you need to handle these new complexities:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The server needs to run these calls concurrently or risk being very slow.&lt;/li&gt;&lt;li&gt;The concurrent calls need to be rate limited, or you risk DDOSing your user service.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are issues that browsers take care of for you automatically. The browser rate limits to (typically) six concurrent HTTP calls at a time.&lt;/p&gt;&lt;p&gt;Caching is another issue for the API. If you cache the data server-side you open a new can of worms: cache invalidation. Caching can also cause security issues if the user service denies external users from listing other external users, for example.&lt;/p&gt;&lt;p&gt;Having the UI fetch the resource makes much more sense from a design perspective as well. The initial call will complete quickly since it doesn&amp;rsquo;t do any kind of hydration. This gives the UI some things to display while it fetches the user data in the list of user IDs.&lt;/p&gt;&lt;p&gt;The UI is also in the position of knowing &lt;strong&gt;WHICH&lt;/strong&gt; users to fetch. Consider a resource that has thousands of users. It doesn&amp;rsquo;t make sense to fetch them all, the UI probably can only display a handful of user cards at a time anyway. So it can fetch the 5-10 that it needs, and the rest can wait.&lt;/p&gt;&lt;p&gt;The UI also can now cache the user objects separately from the Resource. This way if the user is surfing the different resources, and it encounters the same users it doesn&amp;rsquo;t need to re-hydrate. Cache invalidation is also simple: invalidate when the user refreshes. It can also use cache headers and a service-worker with the user service to further optimize caching.&lt;/p&gt;&lt;h2 id=&#34;keep-the-api-simple&#34;&gt;Keep the API Simple&lt;/h2&gt;&lt;p&gt;Server-side hydration causes an explosion of complexity that is hard to get right. By pushing hydration onto the UI, the overall system is simpler, and the system that is in the best position to decide what data needs to be fetched is in control.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>home Wireguard setup</title>
       <link>https://www.jakecoffman.com/blog/posts/home-wireguard-setup/</link>
       <pubDate>Sun, 08 Mar 2020 14:49:48 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/home-wireguard-setup/</guid>
       <description>&lt;p&gt;Here&amp;rsquo;s a quick guide to setting up Wireguard to connect your Android phone to your home network.&lt;/p&gt;&lt;h2 id=&#34;server-setup&#34;&gt;Server setup&lt;/h2&gt;&lt;p&gt;Do all of this as root.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Install Wireguard&lt;/li&gt;&lt;li&gt;&lt;code&gt;mkdir /etc/wireguard&lt;/code&gt; if it doesn&amp;rsquo;t already exist&lt;/li&gt;&lt;li&gt;&lt;code&gt;cd /etc/wireguard&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;umask 077&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;wg genkey | tee privatekey | wg pubkey &amp;gt; publickey&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;vim wg0.conf&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;wg0.conf should have these contents:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[Interface]Address = 192.168.2.1  # this is the IP the server will have. Choose an unused subnet.PrivateKey = &amp;lt;server&#39;s privatekey (not path to it, the actual private key)&amp;gt;ListenPort = 51820 # this is the default Wireguard portPostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o enp2s5 -j MASQUERADEPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o enp2s5 -j[Peer]PublicKey = &amp;lt;client&#39;s publickey (actual private key)&amp;gt; # You will set the in the next partAllowedIPs = 192.168.2.2/32 # based on the subnet you&#39;ve chosen in the address above&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace &lt;code&gt;enp2s5&lt;/code&gt; with your actual device name. You can get this with &lt;code&gt;ip link show&lt;/code&gt;.&lt;/p&gt;&lt;h2 id=&#34;client-setup&#34;&gt;Client setup&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Install the Wireguard Android app&lt;/li&gt;&lt;li&gt;Touch &amp;ldquo;Create from scratch&amp;rdquo; under the plus menu&lt;/li&gt;&lt;li&gt;Name it&lt;/li&gt;&lt;li&gt;Generate a private and public key pair&lt;/li&gt;&lt;li&gt;Copy the public key somehow to the server (email?)&lt;/li&gt;&lt;li&gt;Set &lt;code&gt;Addresses&lt;/code&gt; to be in the subnet, e.g. &lt;code&gt;192.168.2.2&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Then add the sever as a peer by tapping &amp;ldquo;Add Peer&amp;rdquo;:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Add the server&amp;rsquo;s public key (it&amp;rsquo;s in &lt;code&gt;/etc/wireguard/publickey&lt;/code&gt;, email it to yourself again)&lt;/li&gt;&lt;li&gt;In &lt;code&gt;Allowed IPs&lt;/code&gt; put &lt;code&gt;0.0.0.0/0, ::/0&lt;/code&gt;&lt;/li&gt;&lt;li&gt;In &lt;code&gt;Endpoint&lt;/code&gt; put in your server&amp;rsquo;s IP or Host, like &lt;code&gt;my.server.com:51820&lt;/code&gt;. This port should match the port configured on the server &lt;code&gt;ListenPort&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Optionally set &lt;code&gt;Persistant keepalive&lt;/code&gt; to a value (e.g. &lt;code&gt;25&lt;/code&gt;) if you want the connection to send keepalives.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That&amp;rsquo;s it! Try to connect. If it worked it will say &lt;code&gt;Transfer&lt;/code&gt; and how much data has transferred.&lt;/p&gt;&lt;p&gt;If it doesn&amp;rsquo;t work check:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Your router should be forwarding port 51820 to your server.&lt;/li&gt;&lt;li&gt;Your server&amp;rsquo;s firewall should be allowing port 51820. Just UDP I think?&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You&amp;rsquo;ll also want this to start on the server at startup, so do this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo chown -R root:root /etc/wireguard/sudo chmod -R og-rwx /etc/wireguard/*sudo systemctl enable wg-quick@wg0.service&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;additional-clients&#34;&gt;Additional clients&lt;/h2&gt;&lt;p&gt;You can setup additional clients with a config like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[Interface]PrivateKey = &amp;lt;new client&#39;s private key&amp;gt;ListenPort = 21841Address = 192.168.2.3/32 # always use a new IP in the subnet[Peer]PublicKey = &amp;lt;the server&#39;s public key&amp;gt;AllowedIPs = 192.168.2.0/24, 192.168.1.0/24 # you can also specify just which IPs to send through the VPN like thisEndpoint = my.server.com:51820&lt;/code&gt;&lt;/pre&gt;</description>
     </item>
   
     <item>
       <title>simple Jenkins-in-Docker setup</title>
       <link>https://www.jakecoffman.com/blog/posts/jenkins-in-docker/</link>
       <pubDate>Sun, 08 Mar 2020 13:13:44 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/jenkins-in-docker/</guid>
       <description>&lt;p&gt;I set up my home lab again with a new hard drive and decided to host Jenkins in Docker. &lt;a href=&#34;https://jenkins.io/doc/book/installing/&#34;&gt;This page&lt;/a&gt; details how to run Jenkins in a container, but the instructions lacked specifics of how to get things going on a single box.&lt;/p&gt;&lt;p&gt;So here&amp;rsquo;s how I did it: I created two systemd configs (place these in &lt;code&gt;/etc/systemd/system&lt;/code&gt; as &lt;code&gt;jenkins.service&lt;/code&gt; and &lt;code&gt;jenkins-docker.service&lt;/code&gt;):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[Unit]Description=JenkinsAfter=docker.serviceRequires=docker.service[Service]Type=simpleUser=jakeGroup=jakeRestart=alwaysExecStart=docker container run \            --name jenkins \            --rm \            --user 0 \            --network jenkins \            --env DOCKER_HOST=tcp://docker:2376 \            --env DOCKER_CERT_PATH=/certs/client \            --env DOCKER_TLS_VERIFY=1 \            --env JENKINS_OPTS=&#39;--prefix=/jenkins&#39; \            --publish 8080:8080 \            --publish 50000:50000 \            --volume /var/jenkins_home:/var/jenkins_home \            --volume jenkins-docker-certs:/certs/client:ro \            jenkinsci/blueoceanExecStop=docker stop jenkins[Install]WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To the docker command I added &lt;code&gt;--user 0&lt;/code&gt; because the docker containers that the Jenkins jobs were trying to use my user (1000) which obviously wasn&amp;rsquo;t working. I also mounted the volume to my local &lt;code&gt;/var/jenkins_home&lt;/code&gt;. I also removed &lt;code&gt;--detach&lt;/code&gt; since systemd expects commands to block.&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s the other config:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;[Unit]Description=Jenkins DockerAfter=docker.serviceRequires=docker.service[Service]Type=simpleUser=jakeGroup=jakeRestart=alwaysExecStart=docker container run --name jenkins-docker --rm \            --user 0 \            --privileged --network jenkins --network-alias docker \            --env DOCKER_TLS_CERTDIR=/certs \            --volume jenkins-docker-certs:/certs/client \            --volume /var/jenkins_home:/var/jenkins_home \            --publish 2376:2376 docker:dindExecStop=docker stop jenkins-docker[Install]WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar changes here.&lt;/p&gt;&lt;p&gt;To get things going run these commands:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;systemctl reload-daemonsystemctl jenkins startsystemctl jenkins-docker start&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: I actually abandoned this because there&amp;rsquo;s something nice about having the jobs just run on the OS normally. E.g. I can use the Jenkins user&amp;rsquo;s ssh keys for deployment without having to configure all that in the Jenkinsfile. Also I can install Go or other tools globally through apt instead of having to use a container inside a container.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Guacamole Client ported to Go</title>
       <link>https://www.jakecoffman.com/blog/posts/guacamole-client-go/</link>
       <pubDate>Sun, 19 Jan 2020 14:29:28 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/guacamole-client-go/</guid>
       <description>&lt;p&gt;I was able to open source some work I did at &lt;a href=&#34;https://wwt.com&#34;&gt;WWT&lt;/a&gt; recently. It is a port of the Apache Guacamole Client to Go: &lt;a href=&#34;https://github.com/wwt/guac&#34;&gt;https://github.com/wwt/guac&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Apache Guacamole project describes itself better than I could:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Apache Guacamole is a clientless remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH. We call it clientless because no plugins or client software are required. Thanks to HTML5, once Guacamole is installed on a server, all you need to access your desktops is a web browser.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I ported the client from Java to Go. The client sits between &lt;code&gt;guacd&lt;/code&gt; and the JavaScript app. The main motivation for this was Go is easier to work with than the old Java servlet setup that the Apache project uses.&lt;/p&gt;&lt;p&gt;I also created a simple SPA example using Vue: &lt;a href=&#34;https://github.com/wwt/guac-vue&#34;&gt;https://github.com/wwt/guac-vue&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The official project uses the old AngularJS 1.X so I thought a nice Vue example would be good to have on hand.&lt;/p&gt;&lt;p&gt;Here&amp;rsquo;s a little demo:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/guac.gif&#34; alt=&#34;Guac demo&#34;&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>stack traces rule</title>
       <link>https://www.jakecoffman.com/blog/posts/stack-traces-rule/</link>
       <pubDate>Sun, 19 Jan 2020 14:29:28 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/stack-traces-rule/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve worked with a lot of languages and let me just say that having a big fat stack trace when something goes wrong is amazing. Java does this really well.&lt;/p&gt;&lt;p&gt;Not having a stack trace automatically like in Nodejs or Go is a really bad experience. I&amp;rsquo;m forced to log every time there is a potential error in case a problem happens in production.&lt;/p&gt;&lt;p&gt;You guys that have only ever written JavaScript don&amp;rsquo;t know what you&amp;rsquo;re missing!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>first post</title>
       <link>https://www.jakecoffman.com/blog/posts/first-post/</link>
       <pubDate>Sun, 19 Jan 2020 13:51:58 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/posts/first-post/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve tried starting a blog up about a million times and I usually don&amp;rsquo;t post anything and delete it.&lt;/p&gt;&lt;p&gt;This time I&amp;rsquo;ll try to make it stick by keeping it a &amp;ldquo;Micro-Blog&amp;rdquo; ala Twitter.&lt;/p&gt;&lt;p&gt;And with that&amp;hellip;&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
