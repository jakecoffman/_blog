
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>meta on Jake&#39;s Micro-Blog</title>
   <link>https://www.jakecoffman.com/blog/tags/meta/</link>
   <description>Recent content in meta on Jake&#39;s Micro-Blog</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Sun, 19 Jan 2020 13:51:58 -0600</lastBuildDate>
   
       <atom:link href="https://www.jakecoffman.com/blog/tags/meta/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Unit Testing</title>
       <link>https://www.jakecoffman.com/blog/post/unit-testing/</link>
       <pubDate>Wed, 16 Dec 2020 00:00:00 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/unit-testing/</guid>
       <description>&lt;p&gt;A unit test is a test that tests a single function with all external dependencies mocked or faked.&lt;/p&gt;
&lt;p&gt;Unit testing can either be valuable or be a detriment to the code base, depending on what is being tested.&lt;/p&gt;
&lt;h2 id=&#34;the-good-parts&#34;&gt;The Good Parts&lt;/h2&gt;
&lt;p&gt;Unit testing is valuable when the unit under test has few side effects and actually calculates a value. It can also be valuable to test difficult-to-recreate error scenarios like filesystem errors.&lt;/p&gt;
&lt;p&gt;Cross is a great candidate for unit testing since it is pure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Cross&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This controller logic should be unit tested to ensure the error cases will always be handled. An integration test would work too but since there are no dependencies a unit test is preferable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dataId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;reservationId&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Must be launched with one of: dataId, reservationId`&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;endDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;endDate&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date()) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Already ended`&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;workId&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;badRequest&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`External users may not provide workId`&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;easier-to-test-harder-to-use&#34;&gt;Easier to test, harder to use&lt;/h2&gt;
&lt;p&gt;What happens when you write a test for this function?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Lerp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mult&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strictly speaking you&amp;rsquo;ve written an integration test, not a unit test!&lt;/p&gt;
&lt;p&gt;So a test purist would say you need to introduce dependency injection to mock out the other units:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Lerp&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;mult&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;other&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or maybe some other similar scheme&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PLEASE DON&amp;rsquo;T DO THIS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just write integration tests then at that point, and put them in a different directory. Sometimes by making your code easier to &lt;em&gt;unit&lt;/em&gt; test you&amp;rsquo;re making it harder to use and reason about.&lt;/p&gt;
&lt;p&gt;Dependency Injection is a good thing, but it needs to be applied in sensible ways. (TODO: Future blog post?)&lt;/p&gt;
&lt;h2 id=&#34;testing-the-mocks&#34;&gt;Testing the mocks&lt;/h2&gt;
&lt;p&gt;Consider this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reply&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;patchAndFetchById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Boom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;notFound&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Cannot find user with ID &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instance&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mocking out the User object so that database interaction doesn&amp;rsquo;t happen means you&amp;rsquo;re essentially testing whether you got your mock right. Does this code correctly handle when the ID is not found? It either throws or returns null, but we don&amp;rsquo;t know if we mock it.&lt;/p&gt;
&lt;p&gt;Also consider if you get the mock right but later an update to the library changes the behavior. With a unit test you won&amp;rsquo;t know something is wrong because &lt;em&gt;you&amp;rsquo;re just testing your mocks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another kind of function not worth unit testing that I often see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createValue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;widgetService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchWidget&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;trx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;transactionService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;billingService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createBill&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;trx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is &amp;ldquo;glue code&amp;rdquo;. Unit testing makes no sense and will slow you down when business needs change.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Server-Side Hydration Anti-Pattern</title>
       <link>https://www.jakecoffman.com/blog/post/server-side-hydration/</link>
       <pubDate>Thu, 10 Dec 2020 14:49:48 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/server-side-hydration/</guid>
       <description>&lt;p&gt;When designing and implementing a REST API in a service-oriented or microservice architecture you may be tempted to fetch remote objects so the UI doesn&amp;rsquo;t have to fetch them individually later. This is often called hydration or inflation.&lt;/p&gt;
&lt;p&gt;I will now try to convince you that this is an anti-pattern to hydrate server-side.&lt;/p&gt;
&lt;h2 id=&#34;an-example&#34;&gt;An Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say you have a service for users, and your REST Resource contains a list of users. The naive approach is to store the user IDs in the list and then allow the UI to hydrate the users by calling to the user service.&lt;/p&gt;
&lt;p&gt;Maybe you or the UI team thinks this is too much work for the UI to do! So you decide to hydrate your resource with the full user object by calling to the user service just before the response.&lt;/p&gt;
&lt;p&gt;Suddenly you need to handle these new complexities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The server needs to run these calls concurrently or risk being very slow.&lt;/li&gt;
&lt;li&gt;The concurrent calls need to be rate limited, or you risk DDOSing your user service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are issues that browsers take care of for you automatically. The browser rate limits to (typically) six concurrent HTTP calls at a time.&lt;/p&gt;
&lt;p&gt;Caching is another issue for the API. If you cache the data server-side you open a new can of worms: cache invalidation. Caching can also cause security issues if the user service denies external users from listing other external users, for example.&lt;/p&gt;
&lt;p&gt;Having the UI fetch the resource makes much more sense from a design perspective as well. The initial call will complete quickly since it doesn&amp;rsquo;t do any kind of hydration. This gives the UI some things to display while it fetches the user data in the list of user IDs.&lt;/p&gt;
&lt;p&gt;The UI is also in the position of knowing &lt;strong&gt;WHICH&lt;/strong&gt; users to fetch. Consider a resource that has thousands of users. It doesn&amp;rsquo;t make sense to fetch them all, the UI probably can only display a handful of user cards at a time anyway. So it can fetch the 5-10 that it needs, and the rest can wait.&lt;/p&gt;
&lt;p&gt;The UI also can now cache the user objects separately from the Resource. This way if the user is surfing the different resources, and it encounters the same users it doesn&amp;rsquo;t need to re-hydrate. Cache invalidation is also simple: invalidate when the user refreshes. It can also use cache headers and a service-worker with the user service to further optimize caching.&lt;/p&gt;
&lt;h2 id=&#34;keep-the-api-simple&#34;&gt;Keep the API Simple&lt;/h2&gt;
&lt;p&gt;Server-side hydration causes an explosion of complexity that is hard to get right. By pushing hydration onto the UI, the overall system is simpler, and the system that is in the best position to decide what data needs to be fetched is in control.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>home Wireguard setup</title>
       <link>https://www.jakecoffman.com/blog/post/home-wireguard-setup/</link>
       <pubDate>Sun, 08 Mar 2020 14:49:48 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/home-wireguard-setup/</guid>
       <description>&lt;p&gt;Here&amp;rsquo;s a quick guide to setting up Wireguard to connect your Android phone to your home network.&lt;/p&gt;
&lt;h2 id=&#34;server-setup&#34;&gt;Server setup&lt;/h2&gt;
&lt;p&gt;Do all of this as root.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Wireguard&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir /etc/wireguard&lt;/code&gt; if it doesn&amp;rsquo;t already exist&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /etc/wireguard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask 077&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wg genkey | tee privatekey | wg pubkey &amp;gt; publickey&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim wg0.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;wg0.conf should have these contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Interface]
Address = 192.168.2.1  # this is the IP the server will have. Choose an unused subnet.
PrivateKey = &amp;lt;server&#39;s privatekey (not path to it, the actual private key)&amp;gt;
ListenPort = 51820 # this is the default Wireguard port
PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o enp2s5 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o enp2s5 -j

[Peer]
PublicKey = &amp;lt;client&#39;s publickey (actual private key)&amp;gt; # You will set the in the next part
AllowedIPs = 192.168.2.2/32 # based on the subnet you&#39;ve chosen in the address above
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replace &lt;code&gt;enp2s5&lt;/code&gt; with your actual device name. You can get this with &lt;code&gt;ip link show&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;client-setup&#34;&gt;Client setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install the Wireguard Android app&lt;/li&gt;
&lt;li&gt;Touch &amp;ldquo;Create from scratch&amp;rdquo; under the plus menu&lt;/li&gt;
&lt;li&gt;Name it&lt;/li&gt;
&lt;li&gt;Generate a private and public key pair&lt;/li&gt;
&lt;li&gt;Copy the public key somehow to the server (email?)&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Addresses&lt;/code&gt; to be in the subnet, e.g. &lt;code&gt;192.168.2.2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then add the sever as a peer by tapping &amp;ldquo;Add Peer&amp;rdquo;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the server&amp;rsquo;s public key (it&amp;rsquo;s in &lt;code&gt;/etc/wireguard/publickey&lt;/code&gt;, email it to yourself again)&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Allowed IPs&lt;/code&gt; put &lt;code&gt;0.0.0.0/0, ::/0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Endpoint&lt;/code&gt; put in your server&amp;rsquo;s IP or Host, like &lt;code&gt;my.server.com:51820&lt;/code&gt;. This port should match the port configured on the server &lt;code&gt;ListenPort&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Optionally set &lt;code&gt;Persistant keepalive&lt;/code&gt; to a value (e.g. &lt;code&gt;25&lt;/code&gt;) if you want the connection to send keepalives.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it! Try to connect. If it worked it will say &lt;code&gt;Transfer&lt;/code&gt; and how much data has transferred.&lt;/p&gt;
&lt;p&gt;If it doesn&amp;rsquo;t work check:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your router should be forwarding port 51820 to your server.&lt;/li&gt;
&lt;li&gt;Your server&amp;rsquo;s firewall should be allowing port 51820. Just UDP I think?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;ll also want this to start on the server at startup, so do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R root:root /etc/wireguard/
sudo chmod -R og-rwx /etc/wireguard/*
sudo systemctl enable wg-quick@wg0.service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;additional-clients&#34;&gt;Additional clients&lt;/h2&gt;
&lt;p&gt;You can setup additional clients with a config like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Interface]
PrivateKey = &amp;lt;new client&#39;s private key&amp;gt;
ListenPort = 21841
Address = 192.168.2.3/32 # always use a new IP in the subnet

[Peer]
PublicKey = &amp;lt;the server&#39;s public key&amp;gt;
AllowedIPs = 192.168.2.0/24, 192.168.1.0/24 # you can also specify just which IPs to send through the VPN like this
Endpoint = my.server.com:51820
&lt;/code&gt;&lt;/pre&gt;</description>
     </item>
   
     <item>
       <title>simple Jenkins-in-Docker setup</title>
       <link>https://www.jakecoffman.com/blog/post/jenkins-in-docker/</link>
       <pubDate>Sun, 08 Mar 2020 13:13:44 -0500</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/jenkins-in-docker/</guid>
       <description>&lt;p&gt;I set up my home lab again with a new hard drive and decided to host Jenkins in Docker. &lt;a href=&#34;https://jenkins.io/doc/book/installing/&#34;&gt;This page&lt;/a&gt; details how to run Jenkins in a container, but the instructions lacked specifics of how to get things going on a single box.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s how I did it: I created two systemd configs (place these in &lt;code&gt;/etc/systemd/system&lt;/code&gt; as &lt;code&gt;jenkins.service&lt;/code&gt; and &lt;code&gt;jenkins-docker.service&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Jenkins
After=docker.service
Requires=docker.service

[Service]
Type=simple
User=jake
Group=jake
Restart=always
ExecStart=docker container run \
            --name jenkins \
            --rm \
            --user 0 \
            --network jenkins \
            --env DOCKER_HOST=tcp://docker:2376 \
            --env DOCKER_CERT_PATH=/certs/client \
            --env DOCKER_TLS_VERIFY=1 \
            --env JENKINS_OPTS=&#39;--prefix=/jenkins&#39; \
            --publish 8080:8080 \
            --publish 50000:50000 \
            --volume /var/jenkins_home:/var/jenkins_home \
            --volume jenkins-docker-certs:/certs/client:ro \
            jenkinsci/blueocean
ExecStop=docker stop jenkins

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To the docker command I added &lt;code&gt;--user 0&lt;/code&gt; because the docker containers that the Jenkins jobs were trying to use my user (1000) which obviously wasn&amp;rsquo;t working. I also mounted the volume to my local &lt;code&gt;/var/jenkins_home&lt;/code&gt;. I also removed &lt;code&gt;--detach&lt;/code&gt; since systemd expects commands to block.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the other config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Jenkins Docker
After=docker.service
Requires=docker.service

[Service]
Type=simple
User=jake
Group=jake
Restart=always
ExecStart=docker container run --name jenkins-docker --rm \
            --user 0 \
            --privileged --network jenkins --network-alias docker \
            --env DOCKER_TLS_CERTDIR=/certs \
            --volume jenkins-docker-certs:/certs/client \
            --volume /var/jenkins_home:/var/jenkins_home \
            --publish 2376:2376 docker:dind
ExecStop=docker stop jenkins-docker

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similar changes here.&lt;/p&gt;
&lt;p&gt;To get things going run these commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl reload-daemon
systemctl jenkins start
systemctl jenkins-docker start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: I actually abandoned this because there&amp;rsquo;s something nice about having the jobs just run on the OS normally. E.g. I can use the Jenkins user&amp;rsquo;s ssh keys for deployment without having to configure all that in the Jenkinsfile. Also I can install Go or other tools globally through apt instead of having to use a container inside a container.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Guacamole Client ported to Go</title>
       <link>https://www.jakecoffman.com/blog/post/guacamole-client-go/</link>
       <pubDate>Sun, 19 Jan 2020 14:29:28 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/guacamole-client-go/</guid>
       <description>&lt;p&gt;I was able to open source some work I did at &lt;a href=&#34;https://wwt.com&#34;&gt;WWT&lt;/a&gt; recently. It is a port of the Apache Guacamole Client to Go: &lt;a href=&#34;https://github.com/wwt/guac&#34;&gt;https://github.com/wwt/guac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Apache Guacamole project describes itself better than I could:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Guacamole is a clientless remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH. We call it clientless because no plugins or client software are required. Thanks to HTML5, once Guacamole is installed on a server, all you need to access your desktops is a web browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I ported the client from Java to Go. The client sits between &lt;code&gt;guacd&lt;/code&gt; and the JavaScript app. The main motivation for this was Go is easier to work with than the old Java servlet setup that the Apache project uses.&lt;/p&gt;
&lt;p&gt;I also created a simple SPA example using Vue: &lt;a href=&#34;https://github.com/wwt/guac-vue&#34;&gt;https://github.com/wwt/guac-vue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The official project uses the old AngularJS 1.X so I thought a nice Vue example would be good to have on hand.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a little demo:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.jakecoffman.com/blog/blog/guac.gif&#34; alt=&#34;Guac demo&#34;&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>stack traces rule</title>
       <link>https://www.jakecoffman.com/blog/post/stack-traces-rule/</link>
       <pubDate>Sun, 19 Jan 2020 14:29:28 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/stack-traces-rule/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve worked with a lot of languages and let me just say that having a big fat stack trace when something goes wrong is amazing. Java does this really well.&lt;/p&gt;
&lt;p&gt;Not having a stack trace automatically like in Nodejs or Go is a really bad experience. I&amp;rsquo;m forced to log every time there is a potential error in case a problem happens in production.&lt;/p&gt;
&lt;p&gt;You guys that have only ever written JavaScript don&amp;rsquo;t know what you&amp;rsquo;re missing!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>first post</title>
       <link>https://www.jakecoffman.com/blog/post/first-post/</link>
       <pubDate>Sun, 19 Jan 2020 13:51:58 -0600</pubDate>
       
       <guid>https://www.jakecoffman.com/blog/post/first-post/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve tried starting a blog up about a million times and I usually don&amp;rsquo;t post anything and delete it.&lt;/p&gt;
&lt;p&gt;This time I&amp;rsquo;ll try to make it stick by keeping it a &amp;ldquo;Micro-Blog&amp;rdquo; ala Twitter.&lt;/p&gt;
&lt;p&gt;And with that&amp;hellip;&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
